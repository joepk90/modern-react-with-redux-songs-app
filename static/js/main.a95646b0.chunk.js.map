{"version":3,"sources":["components/songList.jsx","actions/index.jsx","components/songDetail.jsx","components/App.jsx","reducers/index.jsx","index.jsx"],"names":["SongList","song","this","props","selectedSong","title","songs","map","className","disabled","isSelected","onClick","selectSong","renderList","Component","connect","state","type","payload","duration","App","combineReducers","action","ReactDom","render","store","createStore","reducers","document","querySelector"],"mappings":"sLAIMA,E,gKAEF,SAAWC,GAEP,OAAgC,OAA5BC,KAAKC,MAAMC,iBACVF,KAAKC,MAAMC,aAAaC,OAEzBH,KAAKC,MAAMC,aAAaC,QAAUJ,EAAKI,S,wBAO/C,WAAc,IAAD,OAET,OAAOH,KAAKC,MAAMG,MAAMC,KAAI,SAAAN,GACxB,OACI,sBAAKO,UAAU,OAAf,UACI,qBAAKA,UAAU,wBAAf,SACI,wBACIC,SAAU,EAAKC,WAAWT,GAC1BO,UAAU,oBACVG,QAAS,kBAAM,EAAKR,MAAMS,WAAWX,IAHzC,sBAMJ,qBAAKO,UAAU,UAAf,SAA0BP,EAAKI,UARRJ,EAAKI,Y,oBAe5C,WACI,OACI,qBAAKG,UAAU,kBAAf,SACKN,KAAKW,mB,GApCCC,aAwDRC,eAdS,SAAAC,GACpB,MAAO,CACHV,MAAOU,EAAMV,MACbF,aAAcY,EAAMJ,cAWY,CAAEA,WC3DhB,SAAAX,GAGtB,MAAO,CACHgB,KAAM,gBACNC,QAASjB,KDsDFc,CAAyCf,G,QEjCzCe,eARS,SAACC,GAErB,OAAO,eACAA,EAAMJ,cAKFG,EAxBI,SAAC,GAAyB,IAAvBV,EAAsB,EAAtBA,MAAOc,EAAe,EAAfA,SAEzB,OAAKd,GAAUc,EAGX,gCACI,8CACA,wCACYd,EACR,uBAFJ,WAGac,QARW,mBCsBrBC,EAtBH,WACR,OACI,sBAAKZ,UAAU,eAAf,UAEI,uDACA,sFAEA,qBAAKA,UAAU,UAAf,SACI,sBAAKA,UAAU,SAAf,UAEI,qBAAKA,UAAU,oBAAf,SACI,cAAC,EAAD,MAEJ,qBAAKA,UAAU,oBAAf,SACI,cAAC,EAAD,eCATa,cAAgB,CAC3Bf,MAlBiB,WACjB,MAAO,CACH,CAAED,MAAO,YAAac,SAAU,QAChC,CAAEd,MAAO,WAAYc,SAAU,QAC/B,CAAEd,MAAO,WAAYc,SAAU,QAC/B,CAAEd,MAAO,qBAAsBc,SAAU,UAc7CP,WAVwB,WAAkC,IAAjCR,EAAgC,uDAAjB,KAAMkB,EAAW,uCACzD,MAAoB,kBAAhBA,EAAOL,KACAK,EAAOJ,QAGXd,KCNXmB,IAASC,OACL,cAAC,IAAD,CACIC,MAAOC,YAAYC,GADvB,SAEC,cAAC,EAAD,MAEDC,SAASC,cAAc,Y","file":"static/js/main.a95646b0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { selectSong } from '../actions/index';\n\nclass SongList extends Component {\n\n    isSelected(song) {\n\n        if (this.props.selectedSong === null) return false;\n        if (!this.props.selectedSong.title) return false;\n\n        if (this.props.selectedSong.title === song.title) {\n            return true;\n        }\n\n        return false;\n    }\n\n    renderList() {\n\n        return this.props.songs.map(song => {\n            return (\n                <div className=\"item\" key={song.title}>\n                    <div className=\"right floated content\">\n                        <button\n                            disabled={this.isSelected(song)}\n                            className=\"ui button primary\"\n                            onClick={() => this.props.selectSong(song)}\n                        >Select</button>\n                    </div>\n                    <div className=\"content\">{song.title}</div>\n                </div>\n            );\n        })\n\n    }\n\n    render() {\n        return (\n            <div className=\"ui divided list\">\n                {this.renderList()}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        songs: state.songs,\n        selectedSong: state.selectSong\n    };\n\n}\n\n// The Connect() Function Explained\n// the first argument is a custom function defined above were we map redux state to this components props\n// the second argument is an object of dispatch functions (store.dispatch()) which also get's passed into our component as properties\n// the second argument is an object where we can pass our Actions (currently only selectSong is being passed in). These are used to update the state when an event is fired.\n// finally the SongsList component is passed as a callback function to the connect function\n// this means the SongsList component is rendered through a connect component where these properties get added to the components props\nexport default connect(mapStateToProps, { selectSong })(SongList);","// Select Song Action Creator\nexport const selectSong = song => {\n\n    // teturn an action\n    return {\n        type: 'SONG_SELECTED',\n        payload: song\n    };\n};","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst SongDetail = ({ title, duration }) => {\n\n    if (!title || !duration) return 'Select a song';\n\n    return (\n        <div>\n            <h3>Details for:</h3>\n            <p>\n                Title: {title}\n                <br />\n                Duration{duration}\n            </p>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n\n    return {\n        ...state.selectSong\n    }\n\n}\n\nexport default connect(mapStateToProps)(SongDetail);","import React from 'react';\n\nimport SongList from './songList';\nimport SongDetail from './songDetail';\n\nconst App = () => {\n    return (\n        <div className=\"ui container\">\n\n            <h1>Song List Application</h1>\n            <h3>Simple application demonstrating Redux (react-redux)</h3>\n\n            <div className=\"ui grid\">\n                <div className=\"ui row\">\n\n                    <div className=\"column eight wide\">\n                        <SongList />\n                    </div>\n                    <div className=\"column eight wide\">\n                        <SongDetail />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App;","import { combineReducers } from 'redux';\n\nconst songsReducer = () => {\n    return [\n        { title: 'No Scrubs', duration: '4:05' },\n        { title: 'Macarena', duration: '2:30' },\n        { title: 'All Star', duration: '3:15' },\n        { title: 'I Want It That Way', duration: '1:45' },\n    ]\n}\n\nconst selectedSongReducer = (selectedSong = null, action) => {\n    if (action.type === 'SONG_SELECTED') {\n        return action.payload;\n    }\n\n    return selectedSong;\n}\n\nexport default combineReducers({\n    songs: songsReducer,\n    selectSong: selectedSongReducer\n});","import React from 'react';\nimport ReactDom from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\n\n\nReactDom.render(\n    <Provider\n        store={createStore(reducers)}\n    ><App />\n    </Provider>,\n    document.querySelector('#root')\n);"],"sourceRoot":""}